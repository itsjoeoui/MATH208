---
title: "Simulating_Random_Processes_In_R"
format: html
editor: visual
---

```{r}
library(tidyverse)
library(ggplot2)
```

```{r}
n <- 10000
x <- integer(n)
x[1] <- 1093
for(i in 2:n) {
  x[i] <- ((2^18 + 1) * x[i - 1]) %% 2^35
}
head(x)
```

```{r}
head(x/(2^35))
```

```{r}
ggplot(data.frame(u = x / 2^35), aes(x = u)) + 
  geom_histogram(breaks = seq(0, 1, length = 30),
                 fill = "lightblue", col = "black")
```

```{r}
n <- 50
my_sims <- tibble(Normal = rnorm(n, mean = 0, sd = 1),
                  Uniform = runif(n, min = 3, max = 7),
                  Beta = rbeta(n, 0.5, 0.5))

my_sims_long <- my_sims %>% 
  pivot_longer(cols = (Normal:Beta)) %>%
  mutate(name = fct_relevel(name, c("Normal","Uniform","Beta")))

p <- ggplot(my_sims_long, aes(x = value)) +
  geom_histogram(aes(y = ..density..), bins = 10, fill = "lightblue", col = "black") +
  geom_density() +
  facet_wrap(~name, scales = "free")
  
p
```

```{r}
n <- 10000
my_sims <- tibble(Normal = rnorm(n, mean = 0, sd = 1),
                  Uniform = runif(n, min = 3, max = 7),
                  Beta = rbeta(n, 0.5, 0.5))

my_sims_long <- my_sims %>% 
  pivot_longer(cols = (Normal:Beta)) %>%
  mutate(name = fct_relevel(name, c("Normal","Uniform","Beta")))

p <- ggplot(my_sims_long, aes(x = value)) +
  geom_histogram(aes(y = ..density..), bins = 30, fill = "lightblue", col = "black") +
  geom_density() +
  facet_wrap(~name, scales = "free")
  
p
```

```{r}
set.seed(8022012)
rnorm(5)
```

```{r}
runif(5)
```

```{r}
set.seed(8022012)
rnorm(6)
```

```{r}
runif(5)
```

# Stocks

```{r}
set.seed(19200)
J <- 10 # Set the number of stocks
weights <- rep(50, J) # Set the weights of the stocks

sigma <- 0.2
X_t_plus_1 <- rnorm(J, 0, sigma)
L_t_plus_1 <- -(weights %*% (exp(X_t_plus_1) - 1))
# L: Lost
```

```{r}
as.numeric(L_t_plus_1) # Loss
```

```{r}
as.numeric(L_t_plus_1/sum(weights) * 100) # Percent Loss/Gain
```

```{r}
one_VaR_sim <- function(reps = 100000, J,
                        weights, sigma,
                        alphas = c(0.95, 0.99, 0.999)) {
  X_t_plus_1 <- matrix(rnorm(J*reps, 0, sigma), ncol = reps)
  L_t_plus_1 <- -weights %*% (exp(X_t_plus_1) - 1)
  VaR_alpha <- quantile(L_t_plus_1, alphas)
  
  return(tibble(alpha = alphas, VaR = VaR_alpha))
}
```

```{r}
set.seed(19752626)

one_VaR_sim(reps = 1000, J = J, weights = weights, sigma = sigma)
```

```{r}
one_VaR_sim(reps = 1000, J = J, weights = weights, sigma = sigma)
```

```{r}
set.seed(19752626)
one_VaR_sim(reps = 100000, J = J, weights = weights, sigma = sigma)
```

```{r}
one_VaR_sim(reps = 100000, J = J, weights = weights, sigma = sigma)
```

```{r}
my_VaR_reps <- replicate(100, one_VaR_sim(
  reps = 10000, J = J, weights = weights, sigma = sigma
))
dim(my_VaR_reps)
```

```{r}
myresults <- apply(aperm(my_VaR_reps, c(2,1)), 2, unlist)
```

```{r}
head(myresults)
```

```{r}
myresults <- as_tibble(myresults) %>% mutate(Rep=rep(1:100, each = 3))
head(myresults)
```

```{r}
ggplot(myresults, aes(x = factor(alpha), y = VaR)) +
  geom_boxplot() + 
  labs(x = bquote(alpha), y=bquote("VaR("~alpha~")"))
```

```{r}
ggplot(myresults, aes(x = factor(alpha), y = VaR)) +
  geom_boxplot() + 
  facet_wrap(~factor(alpha), scales = "free") + 
  labs(x = bquote(alpha), y = bquote("VaR("~alpha~")"))
```

```{r}
set.seed(19752626)

my_results_tbl <- c(1:100) %>%
  map_dfr(~one_VaR_sim(reps = 10000, J = J,
                       weights = weights, sigma = sigma) %>%
            mutate(Rep = .x))

head(my_results_tbl)
```

```{r}
X <- tibble(X1 = rnorm(10000, 0, 0.2), X2 = rnorm(10000, 0, 0.2)) 
library(gridExtra)
plot_my_stuff <- function(X) {
  p1 <- ggplot(X, aes(x = X1)) + 
    geom_histogram(bins = 30, fill = "lightblue", col = "black") +
    scale_y_reverse() +
    coord_flip()
  
  p2 <- ggplot(X, aes(x = X1, y = X2)) + geom_point() +
    coord_flip()
  
  p3 <- ggplot(X, aes(x = X2)) + 
    geom_histogram(bins = 30, fill = "lightblue", col = "black") +
    scale_y_reverse()
  
  plotlist <- list(p1,p2,p3)
  
  grid.arrange(p1, p2, p3, 
               layout_matrix = rbind(c(1, 1, 2, 2, 2),
                                     c(1, 1, 2, 2, 2),
                                     c(1, 1, 2, 2, 2),
                                     c(NA, NA, 3, 3, 3),
                                     c(NA, NA, 3, 3, 3)))
}
```

```{r}
plot_my_stuff(X)
```

```{r}
rho <- 0.5
cov_mat <- matrix(rho, ncol = 2, nrow = 2)
diag(cov_mat) <- 1
cov_mat
```

```{r}
chol(cov_mat)
```

```{r}
X_star <- matrix(rnorm(10000 * 2), ncol = 2)
X <- tibble(X_star %*% chol(cov_mat))
X <- X * 0.2
colnames(X) <- c("X1", "X2")
```

```{r}
plot_my_stuff(X)
```

```{r}
rho <- 0.9
cov_mat <- matrix(rho, ncol = 2, nrow = 2)
diag(cov_mat) <- 1
X_star <- matrix(rnorm(10000 * 2), ncol = 2)
X <- as_tibble(X_star %*% chol(cov_mat))
colnames(X) <- c("X1","X2")
```

```{r}
plot_my_stuff(X)
```

```{r}
rho <- -0.9
cov_mat <- matrix(rho, ncol = 2, nrow = 2)
diag(cov_mat) <- 1

X_star <- matrix(rnorm(10000 * 2), ncol = 2)
X <- as_tibble(X_star %*% chol(cov_mat))
colnames(X) <- c("X1","X2")

plot_my_stuff(X)
```

```{r}
one_VaR_dep_sim <- function(
    reps = 100000, J , weights, sigma, 
    alphas = c(0.95,0.99,0.999), mean = 0, rho = 0) {
  ## Setting covariance matrix
  cov_mat <- matrix(rho, ncol = J, nrow = J)
  diag(cov_mat) <- 1
  X_star <- matrix(rnorm(10000 * J), ncol = J)
  X_t_plus_1 <- t(sigma * X_star %*% chol(cov_mat)) ## transpose for old cod
  ## Compute L_t+1
  L_t_plus_1 <- -weights %*% (exp(X_t_plus_1) - 1) ## Find VaR for different alphas
  VaR_alpha <- quantile(L_t_plus_1, alphas) 
  return(tibble(alpha = alphas, VaR = VaR_alpha))
}
```

```{r}
set.seed(19752626)

my_results_tbl <- c(1:100) %>%
  map_dfr(~one_VaR_dep_sim(
    reps = 10000, J = J, weights = weights, sigma = sigma, rho = 0
    ) %>% mutate(Rep=.x))

my_results_tbl %>% group_by(alpha) %>%
  summarise(Est = mean(VaR))
```

```{r}
ggplot(my_results_tbl, aes(x = factor(alpha), y = VaR)) + 
  geom_boxplot() +
  labs(x = bquote(alpha), y = bquote("VaR("~alpha~")"))
```

```{r}
ggplot(my_results_tbl, aes(x = factor(alpha), y = VaR)) +
  geom_boxplot() +
  facet_wrap(~factor(alpha), scales = "free") +
  labs(x = bquote(alpha), y = bquote("VaR("~alpha~")"))
```

```{r}
rho <- 0.1
cov_mat <- matrix(rho, ncol = 2, nrow = 2)
diag(cov_mat) <- 1
X_star <- 0.2 * matrix(rnorm(10000 * 2), ncol = 2)
X <- as_tibble(X_star %*% chol(cov_mat))
colnames(X) <- c("X1","X2")
plot_my_stuff(X)
```

```{r}
ggplot(X, aes(x = X1, y = X2)) + geom_density_2d()
```

```{r}
set.seed(19752626)

my_results_tbl_0.1 <- c(1:100) %>%

map_dfr(~one_VaR_dep_sim(
  reps=10000, J = J, weights = weights, sigma = sigma, rho = 0.1
  ) %>% mutate(Rep = .x))

my_results_tbl_0.1 %>% group_by(alpha) %>% summarise(Est = mean(VaR))
```

```{r}
ggplot(my_results_tbl_0.1, aes(x = factor(alpha), y = VaR)) + 
  geom_boxplot() + labs(x = bquote(alpha), y = bquote("VaR("~alpha~")"))
```

```{r}
ggplot(my_results_tbl_0.1, aes(x = factor(alpha),y  = VaR)) + 
  geom_boxplot() + 
  facet_wrap(~factor(alpha), scales = "free") +
  labs(x = bquote(alpha), y = bquote("VaR("~alpha~")"))
```

```{r}
my_results_tbl_0.1 <- my_results_tbl_0.1 %>% mutate(rho = 0.1)

my_results_tbl <- my_results_tbl %>% mutate(rho = 0)
both_results_tbl <- bind_rows(my_results_tbl_0.1, my_results_tbl) 
ggplot(both_results_tbl, aes(x = factor(rho), y = VaR, fill = factor(rho))) + 
  geom_boxplot() + facet_wrap(~factor(alpha), scales = "free") + 
  labs(x = bquote(alpha), y = bquote("VaR("~alpha~")"))
```

```{r}
plot_grid <- tibble(x = seq(-0.6, 0.6, length = 1000)) 
ggplot(plot_grid, aes(x = x)) + 
  stat_function(fun = dnorm, args = list(mean = 0,sd = 0.2), lwd = 1, col = "blue") +
  labs(x = bquote(X["t+1, j"]), y = "Density", title = "Normal")
```

```{r}
plot_grid <- tibble(x = seq(-1, 1, length = 1000)) 
ggplot(plot_grid, aes(x = x)) + 
  stat_function(fun = dnorm, args = list(mean = 0, sd = 0.2), lwd = 1, col = "blue") +
  labs(x = bquote(X["t+1, j"]), y = "Density", title = "Normal") +
  stat_function(fun = function(x, df, s) {
    scale_c <- s / sqrt(df / (df - 2)) 
    1 / scale_c * dt(x / scale_c, df)
    }, args = list(df = 5, s = 0.2), lwd = 1, col = "red") +
  labs(x = bquote(X["t+1, j"]), y = "Density", title = "Normal vs. t") +
  stat_function(fun = function(x, df, s) {
    scale_c <- s / sqrt(df / (df - 2)) 
    1 / scale_c * dt(x / scale_c, df)
    }, args = list(df = 10, s = 0.2), lwd = 1, col = "black") +
  labs(x = bquote(X["t+1, j"]), y = "Density", title = "Normal vs. t")
```

```{r}
plot_grid <- tibble(x = seq(-1, 1, length = 1000)) 
ggplot(plot_grid, aes(x = x)) + 
  stat_function(fun = dnorm, args = list(mean = 0, sd = 0.2), lwd = 1, col = "blue") +
  labs(x = bquote(X["t+1, j"]), y = "Density", title = "Normal") +
  stat_function(fun = function(x, df, s) {
    scale_c <- s / sqrt(df / (df - 2)) 
    1 / scale_c * dt(x / scale_c, df)
    }, args = list(df = 5, s = 0.2), lwd = 1, col = "red") +
  labs(x = bquote(X["t+1, j"]), y = "Density", title = "Normal vs. t") +
  stat_function(fun = function(x, df, s) {
    scale_c <- s / sqrt(df / (df - 2)) 
    1 / scale_c * dt(x / scale_c, df)
    }, args = list(df = 10, s = 0.2), lwd = 1, col = "black") +
  labs(x = bquote(X["t+1, j"]), y = "Density", title = "Normal vs. t") + 
  xlim(c(-1, -0.8))
```

```{r}
rho <- 0.5 
df <- 5 
sigma <- 0.2 
J <- 2 
cov_mat <- matrix(rho, ncol = J, nrow = J) 
diag(cov_mat) <- 1 
t_scale <- rchisq(10000 * J, df) 

X_star <- matrix(rnorm(10000 * J), ncol = J)

X_tilde <- matrix(rnorm(10000 * J) / sqrt(df / t_scale), ncol = J) 
X_t_plus_1 <- t(sigma * X_star %*% chol(cov_mat)) ## transpose for old code 
X_t_t_plus_1 <- t(sigma * X_tilde %*% chol(cov_mat)) ## transpose for old code 
X <- as_tibble(t(X_t_plus_1)) 
X_t <- as_tibble(t(X_t_t_plus_1))

colnames(X) <- c("X1","X2") 
colnames(X_t) <- c("X1","X2")
```

```{r}
plot_my_stuff(X)
```

```{r}
plot_my_stuff(X_t)
```

```{r}
p1 <- ggplot(X, aes(x = X1, y = X2)) + 
  geom_hex(bins = 20) + ggtitle("Normal") + 
  ylim(c(-1,1)) + xlim(c(-1,1))

p2 <- ggplot(X_t, aes(x = X1, y = X2)) + 
  geom_hex(bins = 20) + ggtitle(bquote(t[5])) + 
  ylim(c(-1,1)) + xlim(c(-1,1)) 

grid.arrange(p1,p2)
```

```{r}
### First define correlations and df

rho <- c(0,0.1,0.4) 
df <- c(3,10, 100) 
iter <- c(1:100) # Number of iterations of each combination

conditions <- crossing(rho,df,iter) 
head(conditions %>% arrange(iter))
```

```{r}
one_VaR_dep_t_sim <- function(
    reps = 100000, J = 10, weights = rep(50,J), sigma = 0.2, 
    alphas = c(0.95,0.99,0.999), rho = 0, df = 3) { 
  ## Setting covariance matrix 
  cov_mat <- matrix(rho, ncol = J, nrow = J) 
  diag(cov_mat) <- 1 
  t_scale <- rchisq(reps * J, df) 
  X_tilde <- matrix(rnorm(reps * J) / sqrt(df / t_scale), ncol = J) 
  X_t_t_plus_1 <- t(sigma * X_tilde %*% chol(cov_mat)) 
  ## transpose for old code 
  X_t <- as_tibble(t(X_t_t_plus_1)) 
  L_t_plus_1 <- -weights %*% (exp(X_t_t_plus_1) - 1) 
  ## Find VaR for different alphas 
  VaR_alpha <- quantile(L_t_plus_1, alphas) 
  return(tibble(alpha = alphas, VaR = VaR_alpha))
}
```

```{r}
library(tictoc)
tic()
results <- conditions %>% group_by(rho, df, iter) %>%
  mutate(ind_results = pmap(list(rho = rho, df = df), one_VaR_dep_t_sim))
toc()
```

```{r}
head(results %>% arrange(iter))
```

```{r}
results <- results %>% unnest(cols = ind_results)
head(results)
```

```{r}
summarise_for_plot <- results %>% group_by(rho, df, alpha) %>%
  summarise(VaR = mean(VaR))
head(summarise_for_plot)
```

```{r}
ggplot(summarise_for_plot, aes(
  x = factor(alpha), y = VaR,
  col = factor(rho),
  linetype = factor(df),
  group = interaction(df, rho)
)) + geom_point() + geom_line()
```

```{r}
ggplot(summarise_for_plot %>% filter(rho == 0.4), aes(
  x = factor(alpha), y = VaR,
  col = factor(rho),
  linetype = factor(df),
  group = interaction(df, rho)
)) + geom_point() + geom_line()
```

```{r}
library(simsalapar)
rho <- c(0, 0.1, 0.4)
df <- c(3, 10, 100)

varList <- varlist(
  n.sim = list(type = "N", expr = quote(N[sim]), value = 100),
  rho = list(type = "grid", value = rho),
  df = list(type = "grid", value = df)
)
```

```{r}
do_one_VaR_dep_t_sim <- function(
    reps = 100000, J = 10, weights = rep(50,J), 
    sigma = 0.2, alphas = c(0.95,0.99,0.999), rho = 0, df = 3){
  ## Setting covariance matrix
  cov_mat <- matrix(rho, ncol = J, nrow = J)
  diag(cov_mat) <- 1 
  t_scale <- rchisq(reps * J, df)
  X_tilde <- matrix(rnorm(reps*J)/sqrt(df/t_scale), ncol = J)
  X_t_t_plus_1 <- t(sigma * X_tilde %*% chol(cov_mat)) ## transpose for old c
  X_t <- as_tibble(t(X_t_t_plus_1))
  L_t_plus_1 <- -weights %*% (exp(X_t_t_plus_1) - 1) 
  ## Find VaR for different alphas
  VaR_alpha <- quantile(L_t_plus_1,alphas) 
  return(VaR_alpha) ### THIS IS DIFFERENT
}
```

```{r}
tic()
res <- doMclapply(varList, sfile = "res_lapply_seq.rds",
                  doOne = do_one_VaR_dep_t_sim,
                  monitor = interactive()
)
toc()
```

```{r}
dim(res)
```

```{r}
res[1,1,1]
```

```{r}
val <- getArray(res)
mytime <- getArray(res, "time")

df <- array2df(val)
str(df)
```

```{r}
head(df)
```
