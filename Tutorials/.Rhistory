knitr::opts_chunk$set(echo = TRUE)
test = read.csv("Tutorial01_09-09_data.csv")
test
test = read.csv("Tutorial01_09-09_data.csv", colClasses = c("character", "numeric"))
test
test = read.csv("Tutorial01_09-09_data.csv")
test
test = read.csv("Tutorial01_09-09_data.csv", colClasses = c("character", "numeric"))
test
y = vector(length=2)
y[1] = "a"
y[2] = "b"
y
y = vector(length=2)
y[1] = "a"
y[2] = "b"
y
y[3]
y[3] = "c"
y
c1 = c(1,2,3)
c2 = c(4,5,6,0,0,0)
c3 = c(7,8)
c4 = c(1,2,"3")
c1 + 7
c1+c1
c1 + c2
c1*c3
c1 + c4
c1[1] + c4[1]
U1 = c(203, 204)
U2 = c(323,324)
U3 = c(208,427,423,523,545)
mymcgill_stats = list(U1,U2,U3,"Statistics Major")
mymcgill_stats
print(names(mymcgill_stats))
names(mymcgill_stats) = c("U1", "U2", "U3", "Major")
print(names(mymcgill_stats))
print("------")
mymcgill_stats
print(names(mymcgill_stats))
names(mymcgill_stats) = c("U1", "U2", "U3", "Major")
print(names(mymcgill_stats))
print("------")
mymcgill_stats
print(names(mymcgill_stats))
names(mymcgill_stats) = c("U1", "U2", "U3", "Major")
print(names(mymcgill_stats))
print("------")
mymcgill_stats
print(names(mymcgill_stats))
names(mymcgill_stats) = c("U1", "U2", "U3", "Major")
print(names(mymcgill_stats))
print("------")
mymcgill_stats
print(names(mymcgill_stats))
names(mymcgill_stats) = c("U1", "U2", "U3", "Major")
print(names(mymcgill_stats))
print("------")
mymcgill_stats
knitr::opts_chunk$set(echo = TRUE)
U1 = c(203, 204)
U2 = c(323,324)
U3 = c(208,427,423,523,545)
mymcgill_stats = list(U1,U2,U3,"Statistics Major")
mymcgill_stats
print(names(mymcgill_stats))
names(mymcgill_stats) = c("U1", "U2", "U3", "Major")
print(names(mymcgill_stats))
print("------")
mymcgill_stats
print(names(mymcgill_stats))
names(mymcgill_stats) = c("U1", "U2", "U3", "Major")
print(names(mymcgill_stats))
print("------")
mymcgill_stats
mymcgill_stats$Major
mymcgill_stats[1]
mymcgill_stats[2]
mymcgill_stats[1] + mymcgill_stats[2]
mymcgill_stats[1]
mymcgill_stats[[1]]
mymcgill_stats[[1]] + mymcgill_stats[[2]]
mymcgill_stats$U1 + mymcgill_stats$U2
mymcgill_stats[c(1,2)]
mymcgill_stats[[c(1,2)]]
View(mymcgill_stats)
View(mymcgill_stats)
# This loops through the courses
u1_a = mymcgill_stats[[1]]
for(i in 1:length(u1_a)){
print(u1_a[i])
}
print("-----")
# This loops through a list with one element
u1_b = mymcgill_stats[1]
for(i in 1:length(u1_b)){
print(u1_b[i])
}
test_vector = c(1,2,3)
test_vector
names(test_vector) = c("a", "b", "c")
test_vector
test_vector = c(1,2,3)
test_vector
names(test_vector) = c("a", "b", "c")
test_vector
class(mymcgill_stats)
test_vector[1]
test_vector[4] = 4
test_vector
test_list = as.list(test_vector)
test_list
test_list$a
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
data_tibble = read_csv("tut02_09_16_data")
data_tibble = read_csv("tut02_09_16_data.csv")
head(data_tibble)
data_tibble = data_tibble[,c("LOCATION", "PERIOD", "SHOT_CLOCK", "DRIBBLES", "SHOT_DIST", "PTS_TYPE", "SHOT_RESULT", "player_name")]
data_tibble["SHOT_RESULT"] = (data_tibble["SHOT_RESULT"] == "made")
data_tibble
data_tibble = data_tibble[,c("LOCATION", "PERIOD", "SHOT_CLOCK", "DRIBBLES", "SHOT_DIST", "PTS_TYPE", "SHOT_RESULT", "player_name")]
data_tibble["SHOT_RESULT"] = (data_tibble["SHOT_RESULT"] == "made")
data_tibble
data_tibble = data_tibble[c("LOCATION", "PERIOD", "SHOT_CLOCK", "DRIBBLES", "SHOT_DIST", "PTS_TYPE", "SHOT_RESULT", "player_name")]
data_tibble["SHOT_RESULT"] = (data_tibble["SHOT_RESULT"] == "made")
data_tibble
data_tibble = data_tibble[,c("LOCATION", "PERIOD", "SHOT_CLOCK", "DRIBBLES", "SHOT_DIST", "PTS_TYPE", "SHOT_RESULT", "player_name")]
data_tibble["SHOT_RESULT"] = (data_tibble["SHOT_RESULT"] == "made")
data_tibble
c(1,2,3)
two_tibble = data_tibble[data_tibble$PTS_TYPE == 2,]
two_plot = ggplot(two_tibble, aes(x=SHOT_DIST))
two_plot = two_plot + geom_histogram(bins=30, col="black", fill="lightblue")
print(two_plot)
two_tibble = data_tibble[data_tibble$PTS_TYPE == 2,]
two_plot = ggplot(two_tibble, aes(x=SHOT_DIST))
print(two_plot)
two_plot = two_plot + geom_histogram(bins=30, col="black", fill="lightblue")
print(two_plot)
two_plot = two_plot + geom_vline(xintercept=24, color="red")
print(two_plot)
clean_tibble = data_tibble %>% filter(!(SHOT_DIST > 24 & PTS_TYPE==2))
clean_tibble = data_tibble %>% filter(!(SHOT_DIST > 24 & PTS_TYPE==2))
ggplot(filter(clean_tibble, PTS_TYPE==2), aes(x=SHOT_DIST)) + geom_histogram(bins=30, col="black", fill="lightblue") +
geom_vline(xintercept=24, color="red")
ggplot(
filter(clean_tibble, PTS_TYPE==2), aes(x=SHOT_DIST)) +
geom_histogram(bins=30, col="black", fill="lightblue") +
geom_vline(xintercept=24, color="red"
)
loc_group = group_by(clean_tibble, LOCATION)
loc_percentage = summarise(loc_group, RATE=sum(SHOT_RESULT)/length(SHOT_RESULT))
loc_percentage
player_loc_percentage = group_by(clean_tibble, LOCATION, player_name) %>% summarise(RATE=sum(SHOT_RESULT)/length(SHOT_RESULT)) %>% ungroup()
player_loc_percentage = arrange(player_loc_percentage, player_name)
player_loc_percentage
home_values = filter(player_loc_percentage, LOCATION=="H")
print(home_values)
away_values = filter(player_loc_percentage, LOCATION!="H")
print(away_values)
home_away_diff_tbl = tibble(HOME=home_values$RATE, AWAY=away_values$RATE)
ggplot(home_away_diff_tbl, aes(x=HOME, y=AWAY)) + geom_point() + geom_abline(intercept = 0, slope=1, col="red")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
data_tibble = read_csv("tut02_09_16_data.csv")
head(data_tibble)
data_tibble = data_tibble[,c("LOCATION", "PERIOD", "SHOT_CLOCK", "DRIBBLES", "SHOT_DIST", "PTS_TYPE", "SHOT_RESULT", "player_name")]
data_tibble["SHOT_RESULT"] = (data_tibble["SHOT_RESULT"] == "made")
data_tibble
c(1,2,3)
two_tibble = data_tibble[data_tibble$PTS_TYPE == 2,]
two_plot = ggplot(two_tibble, aes(x=SHOT_DIST))
two_plot = two_plot + geom_histogram(bins=30, col="black", fill="lightblue")
print(two_plot)
two_plot = two_plot + geom_vline(xintercept=24, color="red")
print(two_plot)
clean_tibble = data_tibble %>% filter(!(SHOT_DIST > 24 & PTS_TYPE==2))
ggplot(
filter(clean_tibble, PTS_TYPE==2), aes(x=SHOT_DIST)) +
geom_histogram(bins=30, col="black", fill="lightblue") +
geom_vline(xintercept=24, color="red"
)
loc_group = group_by(clean_tibble, LOCATION)
loc_percentage = summarise(loc_group, RATE=sum(SHOT_RESULT)/length(SHOT_RESULT))
loc_percentage
player_loc_percentage = group_by(clean_tibble, LOCATION, player_name) %>% summarise(RATE=sum(SHOT_RESULT)/length(SHOT_RESULT)) %>% ungroup()
player_loc_percentage = arrange(player_loc_percentage, player_name)
player_loc_percentage
home_values = filter(player_loc_percentage, LOCATION=="H")
print(home_values)
away_values = filter(player_loc_percentage, LOCATION!="H")
print(away_values)
home_away_diff_tbl = tibble(HOME=home_values$RATE, AWAY=away_values$RATE)
ggplot(home_away_diff_tbl, aes(x=HOME, y=AWAY)) + geom_point() + geom_abline(intercept = 0, slope=1, col="red")
player_loc_percentage = group_by(clean_tibble, LOCATION, player_name) %>% summarise(RATE=sum(SHOT_RESULT)/length(SHOT_RESULT)) %>% ungroup()
player_loc_percentage = arrange(player_loc_percentage, player_name)
player_loc_percentage
player_loc_percentage =
group_by(clean_tibble, LOCATION, player_name) %>%
summarise(RATE=sum(SHOT_RESULT)/length(SHOT_RESULT)) %>%
ungroup()
player_loc_percentage = arrange(player_loc_percentage, player_name)
player_loc_percentage
player_loc_percentage =
group_by(clean_tibble, LOCATION, player_name) %>%
summarise(RATE=sum(SHOT_RESULT)/length(SHOT_RESULT))
player_loc_percentage = arrange(player_loc_percentage, player_name)
player_loc_percentage
player_loc_percentage =
group_by(clean_tibble, LOCATION, player_name) %>%
summarise(RATE=sum(SHOT_RESULT)/length(SHOT_RESULT)) %>%
ungroup()
player_loc_percentage = arrange(player_loc_percentage, player_name)
player_loc_percentage
player_loc_percentage =
group_by(clean_tibble, LOCATION, player_name) %>%
summarise(RATE=sum(SHOT_RESULT)/length(SHOT_RESULT))
player_loc_percentage = arrange(player_loc_percentage, player_name)
player_loc_percentage
player_loc_percentage =
group_by(clean_tibble, LOCATION, player_name) %>%
summarise(RATE=sum(SHOT_RESULT)/length(SHOT_RESULT)) %>%
ungroup()
player_loc_percentage = arrange(player_loc_percentage, player_name)
player_loc_percentage
player_loc_percentage =
group_by(clean_tibble, LOCATION, player_name) %>%
summarise(RATE=sum(SHOT_RESULT)/length(SHOT_RESULT))
player_loc_percentage = arrange(player_loc_percentage, player_name)
player_loc_percentage
player_loc_percentage =
group_by(clean_tibble, LOCATION, player_name) %>%
summarise(RATE=sum(SHOT_RESULT)/length(SHOT_RESULT)) %>%
ungroup()
player_loc_percentage = arrange(player_loc_percentage, player_name)
player_loc_percentage
knitr::opts_chunk$set(echo = TRUE)
require(tidyverse)
head(iris)
class(iris)
knitr::opts_chunk$set(echo = TRUE)
require(tidyverse)
head(iris)
class(iris)
iris_tbl = as_tibble(iris)
head(iris_tbl)
iris_tbl["Petal.Area"] = iris_tbl["Petal.Length"] * iris_tbl["Petal.Width"]
head(iris_tbl)
ggplot(iris_tbl, aex(x=Petal.Area, y=count)) + geom_histogram(bins=2)
ggplot(iris_tbl, aes(x=Petal.Area, y=count)) + geom_histogram(bins=2)
head(iris_tbl)
ggplot(iris_tbl, aes(x=Petal.Area)) + geom_histogram(bins=2)
ggplot(iris_tbl, aes(x=Petal.Area)) + geom_histogram(bins=20)
ggplot(iris_tbl, aes(x=Petal.Area)) + geom_histogram(bins=10
)
head(iris_tbl)
ggplot(iris_tbl, aes(x=Petal.Area, group=Species)) + geom_histogram(bins=10)
ggplot(iris_tbl, aes(x=Petal.Area, group=Species, fill=Species)) + geom_histogram(bins=10)
ggplot(iris_tbl, aes(x=Petal.Area, group=Species, fill=Species)) + geom_histogram(bins=10) + facet_grid(cols=vars(Species))
ggplot(iris_tbl, aes(x=Petal.Area, group=Species, fill=Species)) + geom_histogram(bins=20) + facet_grid(cols=vars(Species))
ggplot(iris_tbl, aes(x=Petal.Area, group=Species, fill=Species)) + geom_histogram(bins=30) + facet_grid(cols=vars(Species))
ggplot(iris_tbl, aes(x=Petal.Area, group=Species, fill=Species)) + geom_histogram(aes(y=..density..), bins=30) + facet_grid(cols=vars(Species))
ggplot(iris_tbl, aes(x=Petal.Area, group=Species)) + geom_histogram(aes(y=..density..), bins=30) + facet_grid(cols=vars(Species))
ggplot(iris_tbl, aes(x=Petal.Area, group=Species)) + geom_histogram(aes(y=..density..), bins=30, col="black") + facet_grid(cols=vars(Species))
knitr::opts_chunk$set(echo = TRUE)
HTRU2 <- read_csv(here("HTRU2/HTRU_2.csv"), col_names=FALSE)
HTRU2 <- read_csv("HTRU2/HTRU_2.csv", col_names=FALSE)
# Name the variables
names(HTRU2) = c("Mean_IP", "SD_IP", "EK_IP", "SKW_IP", "Mean_DMSNR", "SD_DMSNR", "EK_DMSNR", "SKW_DMSNR", "Class")
HTRU2 <- read_csv("HTRU2/HTRU_2.csv", col_names=FALSE)
# Name the variables
names(HTRU2) = c("Mean_IP", "SD_IP", "EK_IP", "SKW_IP", "Mean_DMSNR", "SD_DMSNR", "EK_DMSNR", "SKW_DMSNR", "Class")
head(HTRU2)
ggplot(HTRU2,aes(x=Class, y=Mean_IP)) + geom_point() + xlab("Mean IP")
HTRU2 <- read.csv("HTRU2/HTRU_2.csv", col_names=FALSE)
HTRU2 <- read_csv("HTRU2/HTRU_2.csv", col_names=FALSE)
# Name the variables
names(HTRU2) = c("Mean_IP", "SD_IP", "EK_IP", "SKW_IP", "Mean_DMSNR", "SD_DMSNR", "EK_DMSNR", "SKW_DMSNR", "Class")
head(HTRU2)
HTRU2 <- HTRU2 %>% mutate(Class=factor(ifelse(Class==0,"Negative","Positive")))
ggplot(HTRU2,aes(x=Class, y=Mean_IP)) + geom_point() + xlab("Mean IP")
HTRU2 <- HTRU2 %>% mutate(Class=factor(ifelse(Class==0,"Negative","Positive")))
head(HTRU2)
ggplot(HTRU2, aes(x=Mean_IP)) + geom_histogram(bins=25,col="black",fill="lightblue")
ggplot(HTRU2, aes(x=SD_IP)) + geom_histogram(bins=25,col="black",fill="lightblue")
p1 = ggplot(HTRU2, aes(x=Mean_IP)) +
geom_histogram(bins=10,col="black",fill="lightblue") +
ggtitle("Mean IP: 10 bins") p2 = ggplot(HTRU2, aes(x=Mean_IP)) +
p1 = ggplot(HTRU2, aes(x=Mean_IP)) +
geom_histogram(bins=10,col="black",fill="lightblue") +
ggtitle("Mean IP: 10 bins")
p2 = ggplot(HTRU2, aes(x=Mean_IP)) +
geom_histogram(bins=40,col="black",fill="lightblue") +
ggtitle("Mean IP: 40 bins")
grid.arrange(p1,p2)
library(gridExtra)
install.packages("gridExtra")
library(gridExtra)
p1 = ggplot(HTRU2, aes(x=Mean_IP)) +
geom_histogram(bins=10,col="black",fill="lightblue") +
ggtitle("Mean IP: 10 bins")
p2 = ggplot(HTRU2, aes(x=Mean_IP)) +
geom_histogram(bins=40,col="black",fill="lightblue") +
ggtitle("Mean IP: 40 bins")
grid.arrange(p1,p2)
library(gridExtra)
p1 = ggplot(HTRU2, aes(x=Mean_IP)) +
geom_histogram(bins=10,col="black",fill="lightblue") +
ggtitle("Mean IP: 10 bins")
p2 = ggplot(HTRU2, aes(x=Mean_IP)) +
geom_histogram(bins=40,col="black",fill="lightblue") +
ggtitle("Mean IP: 40 bins")
grid.arrange(p1,p2)
ggplot(HTRU2, aes(x=Mean_IP, group=Class, fill=Class)) + geom_histogram(bins=25, col="black") + facet_wrap(~Class)
ggplot(HTRU2, aes(x=Mean_IP, group=Class, fill=Class)) + geom_histogram(bins=25, col="black") + facet_wrap(~Class)
ggplot(HTRU2, aes(x=Mean_IP, group=Class, fill=Class)) + geom_histogram(bins=25, col="black") + facet_wrap(Class)
ggplot(HTRU2, aes(x=Mean_IP, group=Class, fill=Class)) + geom_histogram(bins=25, col="black") + facet_wrap(~Class)
ggplot(HTRU2, aes(x=Mean_IP, group=Class, fill=Class)) + geom_histogram(bins=25, col="black") + facet_wrap(~"Class")
head(HTRU2)
ggplot(HTRU2, aes(x=Mean_IP, group=Class, fill=Class)) + geom_histogram(bins=25, col="black") + facet_wrap(~Class)
knitr::opts_chunk$set(echo = TRUE)
HTRU2 <- read_csv("HTRU2/HTRU_2.csv", col_names=FALSE)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
HTRU2 <- read_csv("HTRU2/HTRU_2.csv", col_names=FALSE)
# Name the variables
names(HTRU2) = c("Mean_IP", "SD_IP", "EK_IP", "SKW_IP", "Mean_DMSNR", "SD_DMSNR", "EK_DMSNR", "SKW_DMSNR", "Class")
head(HTRU2)
HTRU2 <- HTRU2 %>% mutate(Class=factor(ifelse(Class==0,"Negative","Positive")))
head(HTRU2)
ggplot(HTRU2,aes(x=Class, y=Mean_IP)) + geom_point() + xlab("Mean IP")
ggplot(HTRU2, aes(x=Mean_IP)) + geom_histogram(bins=25,col="black",fill="lightblue")
ggplot(HTRU2, aes(x=SD_IP)) + geom_histogram(bins=25,col="black",fill="lightblue")
library(gridExtra)
p1 = ggplot(HTRU2, aes(x=Mean_IP)) +
geom_histogram(bins=10,col="black",fill="lightblue") +
ggtitle("Mean IP: 10 bins")
p2 = ggplot(HTRU2, aes(x=Mean_IP)) +
geom_histogram(bins=40,col="black",fill="lightblue") +
ggtitle("Mean IP: 40 bins")
grid.arrange(p1,p2)
head(HTRU2)
ggplot(HTRU2, aes(x=Mean_IP, group=Class, fill=Class)) + geom_histogram(bins=25, col="black") + facet_wrap(~Class)
ggplot(HTRU2, aex(x=Mean_IP, group=Class, fill=Class)) + geom_histogram(bins=25, col="black") + facet_grid(rows=vars(Class))
ggplot(HTRU2, aes(x=Mean_IP, group=Class, fill=Class)) + geom_histogram(bins=25, col="black") + facet_grid(rows=vars(Class))
ggplot(HTRU2, aes(x=Mean_IP, group=Class, fill=Class)) + geom_histogram(bins=25, col="black")
ggplot(HTRU2, aes(x=Mean_IP, group=Class, fill=Class)) + geom_histogram(bins=25, col="black") + facet_grid(rows=vars(Class))
ggplot(HTRU2, aes(x=Mean_IP, group=Class, fill=Class)) + geom_histogram(bins=25, col="black")
ggplot(HTRU2, aes(x=Mean_IP, group=Class, fill=Class)) + geom_histogram(bins=25, col="black", position="dodge")
ggplot(HTRU2, aes(x=Mean_IP, group=Class, fill=Class)) + geom_histogram(aes(y=..density..),bins=25, col="black")
ggplot(HTRU2, aes(x=Mean_IP, group=Class, fill=Class)) + geom_histogram(aes(y=..density..),bins=25, col="black", position="dodge")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
shopping_list <- list(
Grocery = list(
Dairy = c("Milk","Cheese"),
Meat = c("Chicken","Sausage","Bacon"),
Spices = c("Cinnamon")
),
Pharmacy = c("Soap","Toothpaste","Toilet Paper")
)
shopping_list$Grocery[["Meat"]]
shopping_list[[2]][1]
shopping_list[["Pharmacy"]]
shopping_list[1][[c(1,1,2)]]
shopping_list$Grocery[["Meat"]] #
shopping_list[[2]][1]
shopping_list[["Pharmacy"]]
shopping_list[1][[c(1,1,2)]]
shopping_list["Grocery"]
shopping_list[["Pharmacy"]][2]
shopping_list[["Pharmacy"]][2]
shopping_list[["Pharmacy"]][2]
shopping_list[["Pharmacy"]]
shopping_list[["Pharmacy"]][3]
shopping_list[["Grocery"]]["Meat"]
knit_with_parameters("~/Developer/McGill/MATH208/Assignments/Assignment1.Rmd")
shopping_list$Grocery[["Meat"]] # [1] "Chicken" "Sausage" "Bacon"
shopping_list[[2]][1] # [1] "Soap"
shopping_list[["Pharmacy"]] # [1] "Soap"         "Toothpaste"   "Toilet Paper"
shopping_list[1][[c(1,1,2)]] # [1] "Cheese"
shopping_list$Grocery[["Meat"]]
# [1] "Chicken" "Sausage" "Bacon"
shopping_list[[2]][1]
# [1] "Soap"
shopping_list[["Pharmacy"]]
# [1] "Soap"         "Toothpaste"   "Toilet Paper"
shopping_list[1][[c(1,1,2)]]
# [1] "Cheese"
shopping_list["Grocery"]
knitr::opts_chunk$set(echo = TRUE)
club_teams = read_csv("spi_global_rankings.csv")
club_teams = read_csv("spi_global_rankings.csv")
head(club_teams)
library(tidyverse)
club_teams = read_csv("spi_global_rankings.csv")
head(club_teams)
class(club_teams)
mode(club_teams$name)
mode(club_teams[[name]])
mode(club_teams[["name"]])
mode(club_team$name)
mode(club_teams$name)
club_teams["diffxG"] = club_teams["off"] - club_teams["def"]
head(club_teams)
filter(club_teams, league == "Italy Serie A")
slice(filter(club_teams, league == "Italy Serie A"). 1:5)
slice(filter(club_teams, league == "Italy Serie A"), 1:5)
first_five_serieA = slice(filter(club_teams, league == "Italy Serie A"), 1:5)
print(first_five_serieA)
first_five_serieA = slice(filter(club_teams, league == "Italy Serie A"), 1:5)
print(first_five_serieA)
filter(club_teams, league == "Italy Serie A")
first_five_serieA = slice(filter(club_teams, league == "Italy Serie A"), 1:5)
print(first_five_serieA)
club_teams %>%
group_by(league) %>%
mutate(SPI_max_league_diff = max(spi)-spi) %>%
ungroup()
club_teams %>%
group_by(league) %>%
mutate(SPI_max_league_diff = max(spi)-spi) %>%
ungroup()
club_teams %>%
group_by(league) %>%
mutate(SPI_max_league_diff = max(spi)-spi) %>%
ungroup()
View(club_teams)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
club_teams = read_csv("spi_global_rankings.csv")
head(club_teams)
class(club_teams)
mode(club_teams$name)
club_teams["diffxG"] = club_teams["off"] - club_teams["def"]
head(club_teams)
first_five_serieA = slice(filter(club_teams, league == "Italy Serie A"), 1:5)
print(first_five_serieA)
club_teams <- club_teams %>%
group_by(league) %>%
mutate(SPI_max_league_diff = max(spi)-spi) %>%
ungroup()
head(club_teams)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
club_teams = read_csv("spi_global_rankings.csv")
head(club_teams)
class(club_teams)
mode(club_teams$name)
club_teams["diffxG"] = club_teams["off"] - club_teams["def"]
head(club_teams)
first_five_serieA = slice(filter(club_teams, league == "Italy Serie A"), 1:5)
print(first_five_serieA)
club_teams <- club_teams %>%
group_by(league) %>%
mutate(SPI_max_league_diff = max(spi)-spi) %>%
ungroup()
head(club_teams)
View(club_teams)
View(club_teams)
